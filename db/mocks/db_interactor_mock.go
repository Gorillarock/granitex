// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/Gorillarock/granitex/model"
)

// DBInteractor is an autogenerated mock type for the DBInteractor type
type DBInteractor struct {
	mock.Mock
}

type DBInteractor_Expecter struct {
	mock *mock.Mock
}

func (_m *DBInteractor) EXPECT() *DBInteractor_Expecter {
	return &DBInteractor_Expecter{mock: &_m.Mock}
}

// GetRx provides a mock function with given fields: ctx, params
func (_m *DBInteractor) GetRx(ctx context.Context, params model.GetRxParams) model.ResponsePayloadRxHandler {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetRx")
	}

	var r0 model.ResponsePayloadRxHandler
	if rf, ok := ret.Get(0).(func(context.Context, model.GetRxParams) model.ResponsePayloadRxHandler); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(model.ResponsePayloadRxHandler)
	}

	return r0
}

// DBInteractor_GetRx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRx'
type DBInteractor_GetRx_Call struct {
	*mock.Call
}

// GetRx is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.GetRxParams
func (_e *DBInteractor_Expecter) GetRx(ctx interface{}, params interface{}) *DBInteractor_GetRx_Call {
	return &DBInteractor_GetRx_Call{Call: _e.mock.On("GetRx", ctx, params)}
}

func (_c *DBInteractor_GetRx_Call) Run(run func(ctx context.Context, params model.GetRxParams)) *DBInteractor_GetRx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.GetRxParams))
	})
	return _c
}

func (_c *DBInteractor_GetRx_Call) Return(_a0 model.ResponsePayloadRxHandler) *DBInteractor_GetRx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBInteractor_GetRx_Call) RunAndReturn(run func(context.Context, model.GetRxParams) model.ResponsePayloadRxHandler) *DBInteractor_GetRx_Call {
	_c.Call.Return(run)
	return _c
}

// InsertTx provides a mock function with given fields: ctx, document
func (_m *DBInteractor) InsertTx(ctx context.Context, document model.DocumentEntry) (string, error) {
	ret := _m.Called(ctx, document)

	if len(ret) == 0 {
		panic("no return value specified for InsertTx")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DocumentEntry) (string, error)); ok {
		return rf(ctx, document)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.DocumentEntry) string); ok {
		r0 = rf(ctx, document)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.DocumentEntry) error); ok {
		r1 = rf(ctx, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInteractor_InsertTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertTx'
type DBInteractor_InsertTx_Call struct {
	*mock.Call
}

// InsertTx is a helper method to define mock.On call
//   - ctx context.Context
//   - document model.DocumentEntry
func (_e *DBInteractor_Expecter) InsertTx(ctx interface{}, document interface{}) *DBInteractor_InsertTx_Call {
	return &DBInteractor_InsertTx_Call{Call: _e.mock.On("InsertTx", ctx, document)}
}

func (_c *DBInteractor_InsertTx_Call) Run(run func(ctx context.Context, document model.DocumentEntry)) *DBInteractor_InsertTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.DocumentEntry))
	})
	return _c
}

func (_c *DBInteractor_InsertTx_Call) Return(_a0 string, _a1 error) *DBInteractor_InsertTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInteractor_InsertTx_Call) RunAndReturn(run func(context.Context, model.DocumentEntry) (string, error)) *DBInteractor_InsertTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewDBInteractor creates a new instance of DBInteractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBInteractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBInteractor {
	mock := &DBInteractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
